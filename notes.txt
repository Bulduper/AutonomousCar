sensor modes correspond to resolution
sensor mode 0 seems to show full spectrum of camera, but we dont need such  high resolution (3264 x 2464)
sensor mode 3 seems similar but is 4x less pixels (1640 x 1232)

To get rid of the pink overlay around the center use the method from this link https://www.waveshare.com/wiki/IMX219-160_Camera


----CALIBRATION-----
To rectify an img in OpenCV we need to take at least 30 pictures of chessboard at different angles.
https://docs.opencv.org/3.4.15/dc/dbb/tutorial_py_calibration.html
The flow is:

cv2.findChessBoardCorners => cv2.cornerSubPix (optional, only for drawing )=> cv2.calibrateCamera => matrices, coefficients etc. [SAVE RESULTS]
=> cv2.getOptimalNewCameraMatrix (makes it possible to see the whole img after the undist. - with black fields (alpha = 1))=> cv2.undistort

Using the ROI (region of insterest) returned by cv2.getOptimalNewCameraMatrix we can crop the image.
Probalby using cv2.getOptimalNewCameraMatrix makes no sense unless we want the whole 
(very strange looking) img or we want use different resolution, than the one used for calibration.

----BIRD'S EYE VIEW-----
- obszar zainteresowania
- wykluczylem  dziub pojazdu przy dobieraniu punktow warp


-----JETSON UTILS - VERY IMPORTANT!!!-------

Normally with the native code for jetson.utils flip-method=rotate-180 causes crash!
In order to be able to proceed without crash we need to:

cd /path/to/your/jetson-inference/build
cmake -DDISABLE_NVMM ../
make
sudo make install
(https://forums.developer.nvidia.com/t/gstreamer-gstdecoder-failed-to-retrieve-next-image-buffer/195168/2)

----OPENCV vs. JETSON.UTILS for camera streaming-----
For basic program which only captures image from camera in the loop:

Gstreamer - 30fps, #3 mode, (display 1640x1232):
OPENCV with displaying : T=0.06s=> 15fps
OPENCV without displaying: T=0.06s=>15fps
where cap.read() takes almost all of that time (60ms on average)

Gstreamer - 30fps, #3 mode, (display 640x480)
cap.read() takes 30ms on average

-------opencv tests on opencv_test.py script-----
fps measured every 3s:
GSTR: 20FPS, 0mode, 640x480 => 20fps
GSTR: 20FPS, 1mode, 640x480 => 20fps
GSTR: 28FPS, 1mode, 640x480 => 28fps
GSTR: 30FPS, 2mode, 640x480 => 30fps (restricted fov)
GSTR: 30FPS, 3mode, 640x480 => 30fps
GSTR: 60FPS, 4mode, 640x480 => 55fps
GSTR: 60FPS, 4mode, 480x240 => 56fps
GSTR: 120FPS, 5mode, 640x480 => 50fps
GSTR: 120FPS, 5mode, 640x480 => 60fps (no cv2.imshow)
GSTR: 120FPS, 5mode, 150x100 => 60fps (no cv2.imshow)

GSTR: 30FPS, 5mode, 1640x1232 => 14fps (restricted fov)
GSTR: 30FPS, 5mode, 1640x1232 => 16fps (no cv2.imshow)
GSTR: 30FPS, 3mode, 1640x1232 => 16fps (no cv2.imshow)
GSTR: 30FPS, 3mode, 1640x1232 => 14fps
GSTR: 30FPS, 4mode, 1280x720 => 27fps (restricted fov)
GSTR: 30FPS, 5mode, 1280x720 => 27fps (restricted fov)
GSTR: 30FPS, 3mode, 1280x720 => 28/29fps
GSTR: 20FPS, 3mode, 1280x720 => 20fps
GSTR: 20FPS, 0mode, 1280x720 => 20fps
GSTR: 20FPS, 1mode, 1280x720 => 20fps (narrower top-bottom but full width)


-------jetson.utils Capture()  jetson-camera.py------
1280x720, 30FPS (5mode) => 30fps
1280x720, 120FPS (5mode) => 37fps
1280x720, 60FPS (5mode) => 37fps
1640x1232, 30FPS (3mode) => 30fps
3264x2646, 20FPS (0mode) => 17fps


-------SOCKET.IO-----------------

running Flask or Socket.io on server with Debug mode 'True' makes it not runnable in Threads!


---------net.Detect()------------
When video capturing&detection was in Thread:
-net.detect caused GST error if uart thread was started (image processing Thread ok)

When video capturing&detection was in main:
-net.detect caused GST error only when monkey_patching was on, everything else was working

Just initializing net by net = jetson.inference.detectNet ... causes frequent GST errors (EOL) (but only in some circumstances I think)

---Redis installation (remote dictionary)

sudo apt install redis-server
pip3 install redis

when I installed redis with:
pip3 install redis
I had an 'Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-pw6uuudq/wrapt/' error
I solved it with pip3 install --upgrade setuptools


--------detectNet------------
detectnet tends to crash when input video resolution is too high and framerate is too high
640x480 3fps ok
640x480 30fps ok
1280x720 3fps +-
1280x720 30fps nok

Almost after every successful run of detection - on another try there is EOS error 
and kill of process& gstreamer svc restet is reqired

PULLING VIDEO STREAM FROM MORE THAN 1 PROCESSES ENDS WITH ERROR!

Apparently the detection works the best (best detection accuracy and object distance)
If the image is not resized from 1640x1232 to 640x480, but when the detection gets 640x480 directly

Image cropping - makes huge difference when it comes to decetion distance.
I found (x_min, y_min, x_max, y_max) = (0.2*w, 0.5*h, 0,8*w, 0.7*h) to work well (relative to 1640x1232 resolution).



